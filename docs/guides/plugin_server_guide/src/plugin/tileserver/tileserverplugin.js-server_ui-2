goog.provide('plugin.tileserver.TileserverPlugin');

goog.require('os.data.ConfigDescriptor');
goog.require('os.data.ProviderEntry');
goog.require('os.plugin.AbstractPlugin');
goog.require('os.plugin.PluginManager');
goog.require('os.ui.ProviderImportUI');
goog.require('plugin.tileserver.Tileserver');
goog.require('plugin.tileserver.mime');
goog.require('plugin.tileserver.tileserverImportDirective');


/**
 * Provides Tileserver support
 * @extends {os.plugin.AbstractPlugin}
 * @constructor
 */
plugin.tileserver.TileserverPlugin = function() {
  plugin.tileserver.TileserverPlugin.base(this, 'constructor');
  this.id = plugin.tileserver.ID;
  this.errorMessage = null;
};
goog.inherits(plugin.tileserver.TileserverPlugin, os.plugin.AbstractPlugin);


/**
 * @type {string}
 * @const
 */
plugin.tileserver.ID = 'tileserver';


/**
 * @inheritDoc
 */
plugin.tileserver.TileserverPlugin.prototype.init = function() {
  var dm = os.data.DataManager.getInstance();
  dm.registerProviderType(new os.data.ProviderEntry(
      plugin.tileserver.ID,           // the type
      plugin.tileserver.Tileserver,   // the class
      'Tileserver',                   // the title
      'Tileserver layers'             // the description
      ));

  dm.registerDescriptorType(os.data.ConfigDescriptor.ID, os.data.ConfigDescriptor);

  var im = os.ui.im.ImportManager.getInstance();
  // The argument to ProviderImportUI is the directive. A simple one like this will
  // be expanded under the hood to '<tileserver></tileserver>'. However, you can
  // define your own full markup and pass it in if you like.
  im.registerImportUI(plugin.tileserver.ID, new os.ui.ProviderImportUI('tileserver'));
};


// add the plugin to the application
os.plugin.PluginManager.getInstance().addPlugin(new plugin.tileserver.TileserverPlugin());
