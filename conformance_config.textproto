requirement: {
  type: BANNED_NAME
  error_message: 'eval is not allowed since it can be used to execute '
                 'arbitrary JavaScript code. It is not typically necessary '
                 'in ordinary programming.'

  value: 'eval'

  whitelist: 'javascript/closure/base.js'
  whitelist: 'javascript/closure/json/json.js'
}

requirement: {
  type: BANNED_PROPERTY
  error_message: 'Arguments.prototype.callee is not allowed in ES5 Strict mode.'
                 'The JavaScript compiler will also check this when '
                 'CHECK_ES5_STRICT is enabled, but this conformance check also '
                 'warns for possible violations.'

  value: 'Arguments.prototype.callee'

  whitelist: 'javascript/closure/base.js'  # goog.base uses arguments.callee
  whitelist: 'javascript/closure/debug/'  # legacy stack trace support, etc
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Element.prototype.innerHTML is not allowed '
                 'since passing unsafe content can cause XSS vulnerabilities. '
                 'Use goog.dom.safe.setInnerHtml instead.'

  value: 'Element.prototype.innerHTML'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'

  # Safely used in goog.string.unescapeEntitiesUsingDom_; the string assigned to
  # innerHTML is a single HTML entity.
  whitelist: 'javascript/closure/string/string.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Element.prototype.outerHTML is not allowed '
                 'since passing unsafe content can cause XSS vulnerabilities. '
                 'Use goog.dom.safe.setOuterHtml instead.'

  value: 'Element.prototype.outerHTML'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Location.prototype.href is not allowed. '
                 'Externally controlled content assigned to the href property '
                 'can cause XSS vulnerabilities, such as executing '
                 'javascript:evil() URLs. Use goog.dom.safe.setLocationHref '
                 'instead.'

  value: 'Location.prototype.href'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Window.prototype.location is not allowed.'
                 'Externally controlled content assigned to the location '
                 'object can cause XSS vulnerabilities, such as executing '
                 'javascript:evil() URLs. Use goog.dom.safe.setLocationHref '
                 'instead.'

  value: 'Window.prototype.location'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to .href property of Anchor, Link, etc elements, '
                 'is not allowed.  Externally controlled content assigned '
                 'to the href property can cause XSS vulnerabilities, such as '
                 'executing javascript:evil() URLs. '
                 'Use goog.dom.safe.setAnchorHref instead.'

  # Types with .href properties that do not extend from Element.
  value: 'StyleSheet.prototype.href'
  value: 'CSSImportRule.prototype.href'

  # All other types extend from Element.
  value: 'Element.prototype.href'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Use of document.domain is not allowed since it relaxes the '
                 'the same origin protections of JavaScript and opens up the '
                 'attack surface for the domain.'

  value: 'Document.prototype.domain'
}

requirement: {
  type: BANNED_NAME
  error_message: 'Number.MIN_VALUE is the smallest fractional value, which is '
                 'still greater than zero. Use Number.NEGATIVE_INFINITY instead.'

  value: 'Number.MIN_VALUE'
}

requirement: {
  type: BANNED_NAME
  value: 'goog.dom.getTextContent'
  error_message: 'goog.dom.getTextContent(node) is not permitted. Use '
                 'ol.xml.getAllTextContent(node, true) instead.'
}

requirement: {
  type: BANNED_NAME
  value: 'goog.dom.getRawTextContent'
  error_message: 'goog.dom.getRawTextContent(node) is not permitted. Use '
                 'ol.xml.getAllTextContent(node, false) instead.'
}

requirement: {
  type: BANNED_NAME
  value: 'Object.assign'
  error_message: 'Object.assign is not permitted. Use '
                 'ol.obj.assign instead.'
}

requirement: {
  type: BANNED_NAME
  value: 'goog.abstractMethod'
  error_message: 'goog.abstractMethod is not permitted. Use @abstract on the class and method instead.'
}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.bind'
#  error_message: 'goog.bind(func, args) is not permitted. Use func.bind(args) instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.exportProperty'
#  error_message: 'goog.exportProperty is not permitted. Use @export in the JSDoc to prevent function renaming, or '
#                 'assign the property directly for aliases.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isBoolean'
#  error_message: 'goog.isBoolean(value) is not permitted. Use typeof value === \'boolean\' instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isDef'
#  error_message: 'goog.isDef(value) is not permitted. Use value !== undefined instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isDefAndNotNull'
#  error_message: 'goog.isDefAndNotNull(value) is not permitted. Use value != null instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isNull'
#  error_message: 'goog.isNull(value) is not permitted. Use value === null instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isNumber'
#  error_message: 'goog.isNumber(value) is not permitted. Use typeof value === \'number\' instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.isString'
#  error_message: 'goog.isString(value) is not permitted. Use typeof value === \'string\' instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.clear'
#  error_message: 'goog.array.clear is not permitted. Use os.array.clear instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.forEach'
#  error_message: 'goog.array.forEach is not permitted. Use os.array.forEach instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.contains'
#  error_message: 'goog.array.contains is not permitted. Use ol.array.includes instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.find'
#  error_message: 'goog.array.find is not permitted. Use ol.array.find instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.findIndex'
#  error_message: 'goog.array.findIndex is not permitted. Use ol.array.findIndex instead.'
#}

#requirement: {
#  type: BANNED_NAME
#  value: 'goog.array.remove'
#  error_message: 'goog.array.remove is not permitted. Use ol.array.remove instead.'
#}
