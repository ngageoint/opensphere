{
  "name": "opensphere",
  "version": "0.0.0-development",
  "description": "OpenSphere is a pluggable GIS web application that supports both 2D and 3D views.",
  "main": "index.js",
  "directories": {
    "src": "src",
    "test": "test",
    "externs": "externs",
    "onboarding": "onboarding",
    "scss": "scss",
    "views": "views"
  },
  "build": {
    "config": "config/settings.json",
    "gcc-src": [
      "src/**.js"
    ],
    "type": "app",
    "pluggable": true,
    "index": "index.js",
    "scss": "scss/opensphere.scss",
    "scssPaths": [
      "sass-yiq/src/sass"
    ],
    "themes": [
      "overrides_default_compact",
      "overrides_default_compact_cb_rg",
      "overrides_default_compact_cb_b",
      "overrides_slate_compact",
      "overrides_slate_compact_cb_rg",
      "overrides_slate_compact_cb_b"
    ],
    "fonts": [
      "typeface-open-sans"
    ],
    "defineRoots": {
      "os.APP_ROOT": "./"
    },
    "electron": {
      "preload": [
        "./scripts/electron/preload.js"
      ]
    },
    "gcc": {
      "language_in": "ECMASCRIPT_2018",
      "conformance_configs": "conformance_config.textproto",
      "externs": [
        "google-closure-compiler/contrib/externs/jquery-1.9.js",
        "google-closure-compiler/contrib/externs/angular-1.5-http-promise_templated.js",
        "google-closure-compiler/contrib/externs/angular-1.5-resource.js",
        "google-closure-compiler/contrib/externs/angular-1.5-q_templated.js",
        "google-closure-compiler/contrib/externs/svg.js",
        "openlayers/src/ol/typedefs.js",
        "openlayers/externs/closure-compiler.js",
        "openlayers/externs/geojson.js",
        "openlayers/externs/oli.js",
        "openlayers/externs/olx.js",
        "openlayers/externs/proj4js.js",
        "openlayers/externs/topojson.js",
        "ol-cesium/externs/olcsx.js"
      ],
      "entry_point": [
        "goog:osmain"
      ],
      "extra_annotation_name": [
        "api",
        "observable"
      ],
      "define": [
        "os.SETTINGS=config/settings.json"
      ],
      "hide_warnings_for": [
        ".build/",
        "/google-closure-library/",
        "/openlayers/",
        "/ol-cesium/"
      ]
    },
    "moduleDefines": {
      "os.file.ZIP_PATH": "zip-js/WebContent",
      "plugin.cesium.LIBRARY_BASE_PATH": "cesium/Build/CesiumUnminified"
    }
  },
  "scripts": {
    "apidoc": "npm run compile:resolve && npm run compile:gcc && npm run compile:dossier",
    "guide": "make -C docs clean html",
    "guide:auto": "sphinx-autobuild docs docs/_build/html",
    "genlibs": "run-p gen:modernizr gen:xmllexer",
    "gen:deps": "os-gendeps .build/gcc-args.json .build/deps.js",
    "gen:modernizr": "modernizr -c modernizr.config.json -u -d .build/modernizr.js",
    "pregen:xmllexer": "echo \"window.xmlLexer = require('xml-lexer');\" > .build/xml-lexer.require.js",
    "gen:xmllexer": "browserify .build/xml-lexer.require.js -o .build/xml-lexer.min.js",
    "postgen:xmllexer": "rm .build/xml-lexer.require.js",
    "gentestlibs": "npm run gen:webgl-mock",
    "gen:webgl-mock": "browserify vendor/webgl-mock/webgl-mock.require.js -o .build/webgl-mock.min.js",
    "test:gcc": "os-compile .build/gcc-test-args.json",
    "test:init": "npm run genlibs && npm run gentestlibs && npm run compile:resolve -- --exclude resources scss && npm run test:gcc",
    "test:debug": "karma start --browsers Chrome --reporters dots",
    "test:run": "karma start --single-run",
    "test": "npm run test:init && npm run test:run",
    "test:cypress": "bash cypress/support/execute-tests.sh dev gui user na $1",
    "test:cypress-all": "bash cypress/support/execute-tests.sh dev cli all na $1",
    "test:cypress-smoke": "bash cypress/support/execute-tests.sh dev cli smoke na $1",
    "test:cypress-spec": "bash cypress/support/execute-tests.sh dev cli spec $1 $2",
    "test:cypress-loop": "bash cypress/support/execute-tests.sh dev cli loop $1 $2",
    "init:apidoc": "rimraf .build/*.conf.json dist/apidoc && mkdirp .build dist/apidoc",
    "init:base": "rimraf .build dist && mkdirp .build dist/opensphere",
    "init:debug": "rimraf index.html",
    "init:version": "echo dist/opensphere/v$(date +%s) > .build/version; cat .build/version",
    "init:vfolder": "mkdirp $(cat .build/version)",
    "init": "npm-run-all -p init:base init:debug -s init:version init:vfolder",
    "lint:html": "html-validate 'views/**/*.html'",
    "lint:css": "sass-lint -v -s scss -i 'scss/nolint/**/*.scss' 'scss/**/*.scss'",
    "lint:js": "eslint --cache 'src/**/*.js' 'cypress/**/*.js' 'tasks/**/*.js'",
    "lint": "npm run lint:html && npm run lint:js && npm run lint:css",
    "compile:dossier": "npm run init:apidoc && os-docs-gen-config dossier.conf.json .build/dossier.conf.json && os-docs -c .build/dossier.conf.json",
    "precompile:resolve": "cp addlayer.js .build",
    "compile:resolve": "os-resolve --outputDir .build --defineRoots $(cat .build/version)",
    "postcompile:resolve": "node scripts/addlayer-replace.js",
    "compile:debugcss": "for i in $(ls -1 .build/themes | grep node-sass-args); do node-sass --source-map true -o .build/themes --output-style expanded $(cat .build/themes/$i) & pids=\"$pids $!\"; done; wait $pids;",
    "postcompile:debugcss": "for i in $(ls -1 .build/themes | grep combined.css | grep -v combined.css.map); do postcss .build/themes/$i --no-map -u autoprefixer -r & pids=\"$pids $!\"; done; wait $pids",
    "minify:css": "for i in $(ls -1 .build/themes | grep combined.css | grep -v combined.css.map); do cleancss --output .build/themes/$(echo $i | sed 's/combined/min/') .build/themes/$i & pids=\"$pids $!\"; done; wait $pids",
    "compile": "npm-run-all -s compile:vendor-min compile:resolve gen:deps -p build:webpack compile:css",
    "compile:css": "npm run compile:debugcss; npm run minify:css;",
    "compile:gcc": "os-compile .build/gcc-args.json",
    "postcompile:gcc": "echo \"//# sourceMappingURL=$(pwd)/.build/opensphere.min.map\" >> .build/opensphere.min.js",
    "compile:vendor-min": "node vendor-min",
    "precopy:files": "mkdirp $(cat .build/version)/styles && mkdirp $(cat .build/version)/styles/themes && mkdirp dist/opensphere/test",
    "precopy:views": "mkdirp $(cat .build/version)/views",
    "precopy:config": "mkdirp dist/opensphere/config",
    "precopy:resources": "xargs -n 1 mkdir -p < .build/resources-copy-dirs",
    "precopy:onboarding": "mkdirp $(cat .build/version)/onboarding",
    "copy:files": "cp .build/opensphere.min.* $(cat .build/version) && cp .build/themes/*.min.css $(cat .build/version)/styles/themes && cp -r .build/themes/fonts $(cat .build/version)/styles/themes",
    "copy:images": "cp -r images $(cat .build/version)/images",
    "copy:onboarding": "xargs -n 1 -I @ sh -c 'cp -rf @ $(cat .build/version)/onboarding/.' < .build/copy-onboarding-args",
    "copy:views": "xargs -n 1 -I @ sh -c 'cp -rf @ $(cat .build/version)/views/.' < .build/copy-views-args",
    "copy:config": "cp .build/settings.json dist/opensphere/config",
    "copy:resources": "xargs -n 2 cp -r < .build/resources-copy-files",
    "copy": "npm-run-all -s copy:files copy:images copy:onboarding copy:views copy:config copy:resources",
    "rename": "find dist -type f | xargs perl -pi -e \"s#{APP}#$(json -a admin.brand.opensphere admin.about.application -d '\\n'< .build/settings.json | sed '/^$/d' | head -n 1)#g\"",
    "build": "npm-run-all -s init -p lint genlibs -s compile copy build:index rename",
    "build:nolint": "npm run init && npm run genlibs && npm run compile && npm run copy && npm run build:index && npm run rename",
    "build:index": "xargs -n 1 os-index < .build/resources-pages",
    "dev": "npm-run-all -s init genlibs compile:resolve gen:deps -p compile:debugcss build:webpack-dev build:devindex",
    "build:devindex": "xargs -n 1 os-index --debug < .build/resources-pages",
    "build:xt": "mkdirp .build dist/opensphere; tasks/xt/build.js; cp src/os/xt/xt-example.html dist/opensphere",
    "build:webpack": "webpack --mode production",
    "build:webpack-dev": "webpack --mode development",
    "package:update": "if git diff --name-only ORIG_HEAD HEAD | grep --quiet package.json; then echo 'UPDATE: package.json was updated, consider running yarn in your workspace root'; fi",
    "perms": "chmod -R u+rwX,go+rX,go-w .",
    "semantic-release": "semantic-release --dry-run",
    "start-server": "http-server ../../ -a localhost -p 8282 -c-1 -o -U -s &",
    "stop-server": "run-script-os",
    "stop-server:darwin:linux": "pkill -f http-server",
    "stop-server:windows": "taskkill -F -PID $(netstat -ano | findstr 0.0.0.0:8282 | awk '{print $5}')"
  },
  "keywords": [
    "geospatial",
    "geo",
    "gis",
    "map",
    "mapping",
    "closure"
  ],
  "author": "William Wall <wwall@caci.com>",
  "maintainers": [
    "William Wall <wwall@caci.com>",
    "Kevin Schmidt <kschmidt@caci.com>",
    "Jeremy Salankey <jsalankey@caci.com>"
  ],
  "contributors": [
    "Brian Riedinger",
    "Brice Landry",
    "Claudia Bowman",
    "Connor Gibson",
    "Devon Raehal",
    "Doug Welch",
    "Greg Royal",
    "Jason Stiles",
    "Jeremy Salankey",
    "Jessica Denning",
    "Jessica Finnessy",
    "Justin Denton",
    "Kevin Schmidt",
    "Kurtis Golding",
    "Marx Thompson",
    "Michael Dougherty",
    "Michael Roth",
    "Noah Solomon",
    "Rebecca Buss",
    "Robert St. John",
    "Ryan Fox",
    "Sean Tyler",
    "Thomas Hildesheim",
    "William Wall"
  ],
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/ngageoint/opensphere.git"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "release": {
    "plugins": [
      "@semantic-release/commit-analyzer",
      [
        "@semantic-release/release-notes-generator",
        {
          "parserOpts": {
            "issuePrefixes": [
              "#",
              "THIN-",
              "thin-"
            ]
          }
        }
      ],
      [
        "@semantic-release/changelog",
        {
          "changelogFile": "CHANGELOG.md"
        }
      ],
      [
        "@semantic-release/git",
        {
          "assets": [
            "CHANGELOG.md"
          ],
          "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
        }
      ],
      "@semantic-release/npm",
      "@semantic-release/github"
    ]
  },
  "browserslist": [
    "last 1 major version",
    ">= 1%",
    "Chrome >= 35",
    "Firefox >= 31"
  ],
  "resolutions": {
    "raphael": "2.3.0",
    "squire-rte": "1.9.0",
    "handlebars": "4.5.3"
  },
  "devDependencies": {
    "@commitlint/cli": "^8.0.0",
    "@commitlint/config-conventional": "^8.1.0",
    "@commitlint/travis-cli": "^8.1.0",
    "@ngageoint/closure-webpack-plugin": "^1.0.0",
    "@semantic-release/changelog": "^3.0.2",
    "@semantic-release/condition-travis": "^7.1.3",
    "@semantic-release/git": "^7.0.8",
    "@semantic-release/github": "^5.2.10",
    "@semantic-release/npm": "^5.1.4",
    "@semantic-release/release-notes-generator": "^7.1.4",
    "angular-mocks": "~1.7.x",
    "autoprefixer": "^8.4.1",
    "browserify": "^16.5.0",
    "clean-css-cli": "^4.1.11",
    "conventional-changelog-cli": "^1.2.0",
    "conventional-recommended-bump": "^0.3.0",
    "cypress": "^5.3.0",
    "cypress-image-snapshot": "^3.0.1",
    "eslint": "^6.0.0",
    "eslint-config-opensphere": "^4.0.0",
    "html-validate": "^2.20.0",
    "html-validate-angular": "^2.8.3",
    "http-server": "^0.11.1",
    "husky": "^3.0.1",
    "json": "^9.0.4",
    "karma": "^4.3.0",
    "karma-chrome-launcher": "^3.1.0",
    "karma-coverage": "^2.0.1",
    "karma-firefox-launcher": "^1.2.0",
    "karma-googmodule-preprocessor": "^1.0.1",
    "karma-jasmine": "^0.1.0",
    "karma-junit-reporter": "^1.2.0",
    "karma-ng-html2js-preprocessor": "^1.0.0",
    "lolex": "=2.3.2",
    "mkdirp": "^0.5.1",
    "node-sass": "^4.12.0",
    "npm-run-all": "^4.1.5",
    "opensphere-build-closure-helper": "^6.0.0",
    "opensphere-build-docs": "^2.0.0",
    "opensphere-build-index": "^4.0.0",
    "opensphere-build-resolver": "^7.6.0",
    "opensphere-state-schema": "^2.7.0",
    "postcss-cli": "^5.0.0",
    "rimraf": "^2.5.4",
    "run-script-os": "^1.0.7",
    "sass-lint": "^1.12.1",
    "semantic-release": "^15.13.18",
    "surge": "^0.20.4",
    "webgl-mock": "^0.1.7",
    "webpack": "^4.44.1",
    "webpack-cli": "^3.3.12",
    "xmllint": "^0.1.1"
  },
  "dependencies": {
    "@toast-ui/editor": "^2.5.x",
    "angular": "~1.7.x",
    "angular-animate": "~1.7.x",
    "angular-route": "~1.7.x",
    "angular-sanitize": "~1.7.x",
    "blob-polyfill": "^2.0.20171115",
    "bootstrap": "4.5.0",
    "bootswatch": "4.5.0",
    "cesium": "1.67",
    "compass-mixins": "^0.12.10",
    "core-js-bundle": "3.6.4",
    "crossfilter2": "1.4.8",
    "css-element-queries": "=1.2.1",
    "d3": "^3.5.17",
    "d3-tip": "=0.6.8",
    "file-saver": "^1.3.8",
    "font-awesome": "^4.6.3",
    "google-closure-library": "^20200112.0.0",
    "html2canvas": "=1.0.0-rc.4",
    "jquery": "3.4.1",
    "jschardet": "^1.6.0",
    "jsts": "^1.5.0",
    "modernizr": "^3.8.0",
    "moment": "~2.20.1",
    "navigator.sendbeacon": "~0.0.x",
    "oboe": "^2.1.5",
    "ol-cesium": "=1.37.0",
    "openlayers": "=4.6.4",
    "opensphere-asm": "^1.0.0",
    "papaparse": "~4.2.0",
    "platform": "~1.3.4",
    "pluralize": "^8.0.0",
    "proj4": "^2.3.17",
    "sass-yiq": "^1.0.0",
    "save-svg-as-png": "=1.3.2",
    "select2": "^3.5.1",
    "suncalc": "^1.8.0",
    "text-encoding": "^0.6.4",
    "typeface-open-sans": "0.0.75",
    "xml-lexer": "^0.2.2",
    "zip-js": "^0.0.2"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "post-merge": "npm run package:update",
      "post-rewrite": "npm run package:update"
    }
  }
}
